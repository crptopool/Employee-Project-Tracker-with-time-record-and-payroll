<?php

namespace EdgeWeb\Project\EmployeeBundle\Repository;

use EdgeWeb\Project\UserBundle\Repository;

/**
 * TimerecordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimerecordRepository extends \Doctrine\ORM\EntityRepository
{
	public function findTimeInToday($date)
	{
		return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.workingday LIKE :now')->setParameter('now', $date)
            ->orderBy('t.workingday', 'DESC')
            ->getQuery()
            ->getResult()
        ;
	}

    public function countWorkedHoursByDateRange($from,$to,$user)
    {
        return $this->createQueryBuilder('t')
            ->where('t.workingday BETWEEN :datefrom AND :dateto')
            ->andWhere('t.users = :users')
            ->setParameter('datefrom', $from)
            ->setParameter('dateto', $to)
            ->setParameter('users', $user)
            ->select('SUM(t.totalhour) as totalworkedhour')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countOvertimeByDateRange($from,$to,$user)
    {
        return $this->createQueryBuilder('t')
            ->where('t.workingday BETWEEN :datefrom AND :dateto')
            ->andWhere('t.users = :users')
            ->setParameter('datefrom', $from)
            ->setParameter('dateto', $to)
            ->setParameter('users', $user)
            ->select('SUM(t.overtime) as totalovertime')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countNumberDaysByDateRange($from,$to,$user)
    {
        return $this->createQueryBuilder('t')
            ->where('t.workingday BETWEEN :datefrom AND :dateto')
            ->andWhere('t.users = :users')
            ->setParameter('datefrom', $from)
            ->setParameter('dateto', $to)
            ->setParameter('users', $user)
            ->select('COUNT(t.workingday) as totalworkingday')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
